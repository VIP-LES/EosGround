-- SCHEMA: eos_schema

-- DROP SCHEMA IF EXISTS eos_schema ;

CREATE SCHEMA IF NOT EXISTS eos_schema
    AUTHORIZATION pg_database_owner;

GRANT USAGE ON SCHEMA eos_schema TO PUBLIC;

GRANT ALL ON SCHEMA eos_schema TO pg_database_owner;

-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS eos_schema.received_data
(
    id int NOT NULL GENERATED ALWAYS AS IDENTITY,
    raw_bytes bytea NOT NULL,
    rssi int NOT NULL,
    processed boolean NOT NULL DEFAULT FALSE,
    CONSTRAINT received_data_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS eos_schema.received_packets
(
    id int NOT NULL GENERATED ALWAYS AS IDENTITY,
    data_id int NOT NULL,
    packet_type int NOT NULL,
    sender int NOT NULL,
    priority int NOT NULL,
    destination int NOT NULL,
    generate_time timestamp without time zone NOT NULL,
    sequence_number int NOT NULL,
    send_time timestamp without time zone NOT NULL,
    received_time timestamp without time zone NOT NULL,
    packet_body bytea NOT NULL,
    processed boolean NOT NULL DEFAULT FALSE,
    CONSTRAINT received_packets_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS eos_schema.temperature
(
    id int NOT NULL GENERATED ALWAYS AS IDENTITY,
    packet_id int NOT NULL,
    temperature real NOT NULL,
    CONSTRAINT temperature_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS eos_schema.transmit_table
(
    id int NOT NULL GENERATED ALWAYS AS IDENTITY,
    time_sent timestamp without time zone,
    packet_type int NOT NULL,
    sender int NOT NULL,
    priority int NOT NULL,
    destination int NOT NULL,
    generate_time timestamp without time zone NOT NULL,
    body character varying(255) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS eos_schema.test_data
(
    id int NOT NULL GENERATED ALWAYS AS IDENTITY,
    packet_id int NOT NULL,
    random_int int,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS eos_schema.received_packets
    ADD CONSTRAINT received_packets_to_received_data FOREIGN KEY (data_id)
    REFERENCES eos_schema.received_data (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS eos_schema.temperature
    ADD CONSTRAINT temperature_to_received_packet FOREIGN KEY (packet_id)
    REFERENCES eos_schema.received_packets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS eos_schema.test_data
    ADD CONSTRAINT test_data_to_received_packet FOREIGN KEY (packet_id)
    REFERENCES eos_schema.received_packets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;